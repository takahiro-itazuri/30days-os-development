     1                                  ; nasmfunc
     2                                  ; TAB=4
     3                                  
     4                                  [BITS 32]	; 32ビットモード用の機械語を作らせる
     5                                  
     6                                  		GLOBAL	io_hlt,io_cli,io_sti,io_stihlt
     7                                  		GLOBAL	io_in8,io_in16,io_in32
     8                                  		GLOBAL	io_out8,io_out16,io_out32
     9                                  		GLOBAL	io_load_eflags,io_store_eflags
    10                                  		GLOBAL	load_gdtr,load_idtr
    11                                  		GLOBAL	load_cr0,store_cr0
    12                                  		GLOBAL	asm_inthandler20,asm_inthandler21,asm_inthandler27,asm_inthandler2c
    13                                  		GLOBAL	memtest_sub
    14                                  		EXTERN	inthandler20,inthandler21,inthandler27,inthandler2c
    15                                  
    16                                  [SECTION .text]
    17                                  
    18                                  io_hlt:		; void io_hlt(void);
    19 00000000 F4                      		HLT
    20 00000001 C3                      		RET
    21                                  
    22                                  io_cli:		; void io_cli(void);
    23 00000002 FA                      		CLI
    24 00000003 C3                      		RET
    25                                  
    26                                  io_sti:		; void io_sti(void);
    27 00000004 FB                      		STI
    28 00000005 C3                      		RET
    29                                  
    30                                  io_stihlt:	; void io_stihlt(void);
    31 00000006 FB                      		STI
    32 00000007 F4                      		HLT
    33 00000008 C3                      		RET
    34                                  
    35                                  io_in8:		; int io_in8(int port);
    36 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    37 0000000D B800000000              		MOV		EAX,0
    38 00000012 EC                      		IN		AL,DX
    39 00000013 C3                      		RET
    40                                  
    41                                  io_in16:	; int io_in16(int port);
    42 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    43 00000018 B800000000              		MOV		EAX,0
    44 0000001D 66ED                    		IN		AX,DX
    45 0000001F C3                      		RET
    46                                  
    47                                  io_in32:	; int io_in32(int port);
    48 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    49 00000024 ED                      		IN		EAX,DX
    50 00000025 C3                      		RET
    51                                  
    52                                  io_out8:	; void io_out8(int port, int data);
    53 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    54 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    55 0000002E EE                      		OUT		DX,AL
    56 0000002F C3                      		RET
    57                                  
    58                                  io_out16:	; void io_out16(int port, int data);
    59 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    60 00000034 668B442408              		MOV		AX,[ESP+8]		; data
    61 00000039 66EF                    		OUT		DX,AX
    62 0000003B C3                      		RET
    63                                  
    64                                  io_out32:	; void io_out32(int port, int data);
    65 0000003C 8B542404                		MOV		EDX,[ESP+4]		; port
    66 00000040 8B442408                		MOV		EAX,[ESP+8]		; data
    67 00000044 EF                      		OUT		DX,EAX
    68 00000045 C3                      		RET
    69                                  
    70                                  io_load_eflags:		; int io_load_eflags(void);
    71 00000046 9C                      		PUSHFD		; PUSH EFLAGS という意味
    72 00000047 58                      		POP		EAX
    73 00000048 C3                      		RET
    74                                  
    75                                  io_store_eflags:	; void io_store_eflags(int eflags);
    76 00000049 8B442404                		MOV		EAX,[ESP+4]
    77 0000004D 50                      		PUSH	EAX
    78 0000004E 9D                      		POPFD		; POP EFLAGS という意味
    79 0000004F C3                      		RET
    80                                  
    81                                  load_gdtr:			; void load_gdtr(int limit, int addr);
    82 00000050 668B442404              		MOV		AX,[ESP+4]		; limit
    83 00000055 6689442406              		MOV		[ESP+6],AX
    84 0000005A 0F01542406              		LGDT	[ESP+6]
    85 0000005F C3                      		RET
    86                                  
    87                                  load_idtr:			; void load_idtr(int limit, int addr);
    88 00000060 668B442404              		MOV		AX,[ESP+4]		; limit
    89 00000065 6689442406              		MOV		[ESP+6],AX
    90 0000006A 0F015C2406              		LIDT	[ESP+6]
    91 0000006F C3                      		RET
    92                                  
    93                                  load_cr0:			; int load_cr0(void);
    94 00000070 0F20C0                  		MOV		EAX,CR0
    95 00000073 C3                      		RET
    96                                  
    97                                  store_cr0:			; void store_cr0(int cr0);
    98 00000074 8B442404                		MOV		EAX,[ESP+4]
    99 00000078 0F22C0                  		MOV		CR0,EAX
   100 0000007B C3                      		RET
   101                                  
   102                                  asm_inthandler20:
   103 0000007C 06                      		PUSH	ES
   104 0000007D 1E                      		PUSH	DS
   105 0000007E 60                      		PUSHAD
   106 0000007F 89E0                    		MOV		EAX,ESP
   107 00000081 50                      		PUSH	EAX
   108 00000082 668CD0                  		MOV		AX,SS
   109 00000085 8ED8                    		MOV		DS,AX
   110 00000087 8EC0                    		MOV		ES,AX
   111 00000089 E8(00000000)            		CALL	inthandler20
   112 0000008E 58                      		POP		EAX
   113 0000008F 61                      		POPAD
   114 00000090 1F                      		POP		DS
   115 00000091 07                      		POP		ES
   116 00000092 CF                      		IRETD
   117                                  
   118                                  asm_inthandler21:
   119 00000093 06                      		PUSH	ES
   120 00000094 1E                      		PUSH	DS
   121 00000095 60                      		PUSHAD
   122 00000096 89E0                    		MOV		EAX,ESP
   123 00000098 50                      		PUSH	EAX
   124 00000099 668CD0                  		MOV		AX,SS
   125 0000009C 8ED8                    		MOV		DS,AX
   126 0000009E 8EC0                    		MOV		ES,AX
   127 000000A0 E8(00000000)            		CALL	inthandler21
   128 000000A5 58                      		POP		EAX
   129 000000A6 61                      		POPAD
   130 000000A7 1F                      		POP		DS
   131 000000A8 07                      		POP		ES
   132 000000A9 CF                      		IRETD
   133                                  
   134                                  asm_inthandler27:
   135 000000AA 06                      		PUSH	ES
   136 000000AB 1E                      		PUSH	DS
   137 000000AC 60                      		PUSHAD
   138 000000AD 89E0                    		MOV		EAX,ESP
   139 000000AF 50                      		PUSH	EAX
   140 000000B0 668CD0                  		MOV		AX,SS
   141 000000B3 8ED8                    		MOV		DS,AX
   142 000000B5 8EC0                    		MOV		ES,AX
   143 000000B7 E8(00000000)            		CALL	inthandler27
   144 000000BC 58                      		POP		EAX
   145 000000BD 61                      		POPAD
   146 000000BE 1F                      		POP		DS
   147 000000BF 07                      		POP		ES
   148 000000C0 CF                      		IRETD
   149                                  
   150                                  asm_inthandler2c:
   151 000000C1 06                      		PUSH	ES
   152 000000C2 1E                      		PUSH	DS
   153 000000C3 60                      		PUSHAD
   154 000000C4 89E0                    		MOV		EAX,ESP
   155 000000C6 50                      		PUSH	EAX
   156 000000C7 668CD0                  		MOV		AX,SS
   157 000000CA 8ED8                    		MOV		DS,AX
   158 000000CC 8EC0                    		MOV		ES,AX
   159 000000CE E8(00000000)            		CALL	inthandler2c
   160 000000D3 58                      		POP		EAX
   161 000000D4 61                      		POPAD
   162 000000D5 1F                      		POP		DS
   163 000000D6 07                      		POP		ES
   164 000000D7 CF                      		IRETD
   165                                  
   166                                  memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned end)
   167 000000D8 57                      		PUSH	EDI
   168 000000D9 56                      		PUSH	ESI
   169 000000DA 53                      		PUSH	EBX
   170 000000DB 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   171 000000DF BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   172 000000E4 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   173                                  mts_loop:
   174 000000E9 89C3                    		MOV		EBX,EAX
   175 000000EB 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   176 000000F1 8B13                    		MOV		EDX,[EBX]				; old = *p;
   177 000000F3 8933                    		MOV		[EBX],ESI				; *p = pat0;
   178 000000F5 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   179 000000F8 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto mts_fin;
   180 000000FA 7518                    		JNE		mts_fin
   181 000000FC 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   182 000000FF 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto mts_fin;
   183 00000101 7511                    		JNE		mts_fin
   184 00000103 8913                    		MOV		[EBX],EDX				; *p = old;
   185 00000105 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   186 0000010A 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   187 0000010E 76D9                    		JBE		mts_loop
   188 00000110 5B                      		POP		EBX
   189 00000111 5E                      		POP		ESI
   190 00000112 5F                      		POP		EDI
   191 00000113 C3                      		RET
   192                                  mts_fin:
   193 00000114 8913                    		MOV		[EBX],EDX				; *p = old;
   194 00000116 5B                      		POP		EBX
   195 00000117 5E                      		POP		ESI
   196 00000118 5F                      		POP		EDI
   197 00000119 C3                      		RET
